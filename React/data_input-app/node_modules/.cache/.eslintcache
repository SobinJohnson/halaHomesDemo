[{"C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\index.js":"1","C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\App.js":"2","C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\reportWebVitals.js":"3","C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\api.js":"4"},{"size":535,"mtime":1697566962931,"results":"5","hashOfConfig":"6"},{"size":2994,"mtime":1697584819779,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1697566963841,"results":"8","hashOfConfig":"6"},{"size":122,"mtime":1697568183123,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ab67m1",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\index.js",[],[],"C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\App.js",["23"],[],"import React, {useState, useEffect} from \"react\"\nimport api from './api'\n\nconst App = () => {\n  const [users,setUsers] =  useState([]);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    profile: \"\",\n    category: \"\",\n    description: \"\"\n  });\n\nconst fetchUser = async () => {\n  const response = await api.get('/userdata/');\n  setUsers(response.data)\n};\n\nuseEffect(() => {\n  fetchUser();\n}, []);\n\nconst handleInputChange = (event) => {\n  const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n  setFormData({\n    ...formData,\n    [event.target.name]: value\n  });\n};\nconst handleFormSubmit = async (event) => {\n  event.preventDefault();\n  await api.post('/userdata/', formData);\n  fetchUser();\n  setFormData({\n    name: \"\",\n    profile: \"\",\n    category: \"\",\n    description: \"\"\n  });\n};\n\n return (\n  <div>\n    <nav className=\"navbar navbar-dark bg-primary\">\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n        HalaHomes\n        </a>\n      </div>\n    </nav>\n    <div className=\"container\">\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"mb-3 mt-3\">\n          <label htmlFor= 'name' className=\"form-label\">\n            Name:\n          </label>\n          <input type='text' className=\"form-control\" id='name' name=\"name\" onChange={handleInputChange} value={formData.name}></input>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor= 'profile' className=\"form-label\">\n            Profile:\n          </label>\n          <input type='text' className=\"form-control\" id='profile' name=\"profile\" onChange={handleInputChange} value={formData.profile}></input>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor= 'category' className=\"form-label\">\n          Category:\n          </label>\n          <input type='text' className=\"form-control\" id='category' name=\"category\" onChange={handleInputChange} value={formData.category}></input>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor= 'description' className=\"form-label\">\n            Description:\n          </label> \n          <input type='text' className=\"form-control\" id='description' name=\"description\" onChange={handleInputChange} value={formData.description}></input>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary mb-3\">Submit</button>\n      </form>\n\n      <table className=\"table table-striped table-bordered table-hover\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Profile</th>\n            <th>Category</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user)=> (\n            <tr key={user.id}>\n              <td>{user.name}</td>\n              <td>{user.profile}</td>\n              <td>{user.category}</td>\n              <td>{user.description}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n\n  </div>\n )\n}\nexport default App;\n","C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\pc\\Documents\\HalaHomes\\Demo\\React\\data_input-app\\src\\api.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":45,"column":9,"nodeType":"26","endLine":45,"endColumn":46},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]